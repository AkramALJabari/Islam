function convertCountriesCode (contrie_code){
	var contries = {
    "AF": "Afghanistan",
    "AX": "Aland Islands",
    "AL": "Albania",
    "DZ": "Algeria",
    "AS": "American Samoa",
    "AD": "Andorra",
    "AO": "Angola",
    "AI": "Anguilla",
    "AQ": "Antarctica",
    "AG": "Antigua and Barbuda",
    "AR": "Argentina",
    "AM": "Armenia",
    "AW": "Aruba",
    "AU": "Australia",
    "AT": "Austria",
    "AZ": "Azerbaijan",
    "BS": "Bahamas",
    "BH": "Bahrain",
    "BD": "Bangladesh",
    "BB": "Barbados",
    "BY": "Belarus",
    "BE": "Belgium",
    "BZ": "Belize",
    "BJ": "Benin",
    "BM": "Bermuda",
    "BT": "Bhutan",
    "BO": "Bolivia",
    "BQ": "Bonaire, Sint Eustatius and Saba",
    "BA": "Bosnia and Herzegovina",
    "BW": "Botswana",
    "BV": "Bouvet Island",
    "BR": "Brazil",
    "IO": "British Indian Ocean Territory",
    "BN": "Brunei Darussalam",
    "BG": "Bulgaria",
    "BF": "Burkina Faso",
    "BI": "Burundi",
    "KH": "Cambodia",
    "CM": "Cameroon",
    "CA": "Canada",
    "CV": "Cape Verde",
    "KY": "Cayman Islands",
    "CF": "Central African Republic",
    "TD": "Chad",
    "CL": "Chile",
    "CN": "China",
    "CX": "Christmas Island",
    "CC": "Cocos (Keeling) Islands",
    "CO": "Colombia",
    "KM": "Comoros",
    "CG": "Congo",
    "CD": "Congo, the Democratic Republic of the",
    "CK": "Cook Islands",
    "CR": "Costa Rica",
    "CI": "Cote D'Ivoire",
    "HR": "Croatia",
    "CU": "Cuba",
    "CW": "Curacao",
    "CY": "Cyprus",
    "CZ": "Czech Republic",
    "DK": "Denmark",
    "DJ": "Djibouti",
    "DM": "Dominica",
    "DO": "Dominican Republic",
    "EC": "Ecuador",
    "EG": "Egypt",
    "SV": "El Salvador",
    "GQ": "Equatorial Guinea",
    "ER": "Eritrea",
    "EE": "Estonia",
    "ET": "Ethiopia",
    "FK": "Falkland Islands (Malvinas)",
    "FO": "Faroe Islands",
    "FJ": "Fiji",
    "FI": "Finland",
    "FR": "France",
    "GF": "French Guiana",
    "PF": "French Polynesia",
    "TF": "French Southern Territories",
    "GA": "Gabon",
    "GM": "Gambia",
    "GE": "Georgia",
    "DE": "Germany",
    "GH": "Ghana",
    "GI": "Gibraltar",
    "GR": "Greece",
    "GL": "Greenland",
    "GD": "Grenada",
    "GP": "Guadeloupe",
    "GU": "Guam",
    "GT": "Guatemala",
    "GG": "Guernsey",
    "GN": "Guinea",
    "GW": "Guinea-Bissau",
    "GY": "Guyana",
    "HT": "Haiti",
    "HM": "Heard Island and Mcdonald Islands",
    "VA": "Holy See (Vatican City State)",
    "HN": "Honduras",
    "HK": "Hong Kong",
    "HU": "Hungary",
    "IS": "Iceland",
    "IN": "India",
    "ID": "Indonesia",
    "IR": "Iran, Islamic Republic of",
    "IQ": "Iraq",
    "IE": "Ireland",
    "IM": "Isle of Man",
    "IL": "Israel",
    "IT": "Italy",
    "JM": "Jamaica",
    "JP": "Japan",
    "JE": "Jersey",
    "JO": "Jordan",
    "KZ": "Kazakhstan",
    "KE": "Kenya",
    "KI": "Kiribati",
    "KP": "Korea, Democratic People's Republic of",
    "KR": "Korea, Republic of",
    "XK": "Kosovo",
    "KW": "Kuwait",
    "KG": "Kyrgyzstan",
    "LA": "Lao People's Democratic Republic",
    "LV": "Latvia",
    "LB": "Lebanon",
    "LS": "Lesotho",
    "LR": "Liberia",
    "LY": "Libyan Arab Jamahiriya",
    "LI": "Liechtenstein",
    "LT": "Lithuania",
    "LU": "Luxembourg",
    "MO": "Macao",
    "MK": "Macedonia, the Former Yugoslav Republic of",
    "MG": "Madagascar",
    "MW": "Malawi",
    "MY": "Malaysia",
    "MV": "Maldives",
    "ML": "Mali",
    "MT": "Malta",
    "MH": "Marshall Islands",
    "MQ": "Martinique",
    "MR": "Mauritania",
    "MU": "Mauritius",
    "YT": "Mayotte",
    "MX": "Mexico",
    "FM": "Micronesia, Federated States of",
    "MD": "Moldova, Republic of",
    "MC": "Monaco",
    "MN": "Mongolia",
    "ME": "Montenegro",
    "MS": "Montserrat",
    "MA": "Morocco",
    "MZ": "Mozambique",
    "MM": "Myanmar",
    "NA": "Namibia",
    "NR": "Nauru",
    "NP": "Nepal",
    "NL": "Netherlands",
    "AN": "Netherlands Antilles",
    "NC": "New Caledonia",
    "NZ": "New Zealand",
    "NI": "Nicaragua",
    "NE": "Niger",
    "NG": "Nigeria",
    "NU": "Niue",
    "NF": "Norfolk Island",
    "MP": "Northern Mariana Islands",
    "NO": "Norway",
    "OM": "Oman",
    "PK": "Pakistan",
    "PW": "Palau",
    "PS": "Palestinian Territory, Occupied",
    "PA": "Panama",
    "PG": "Papua New Guinea",
    "PY": "Paraguay",
    "PE": "Peru",
    "PH": "Philippines",
    "PN": "Pitcairn",
    "PL": "Poland",
    "PT": "Portugal",
    "PR": "Puerto Rico",
    "QA": "Qatar",
    "RE": "Reunion",
    "RO": "Romania",
    "RU": "Russian Federation",
    "RW": "Rwanda",
    "BL": "Saint Barthelemy",
    "SH": "Saint Helena",
    "KN": "Saint Kitts and Nevis",
    "LC": "Saint Lucia",
    "MF": "Saint Martin",
    "PM": "Saint Pierre and Miquelon",
    "VC": "Saint Vincent and the Grenadines",
    "WS": "Samoa",
    "SM": "San Marino",
    "ST": "Sao Tome and Principe",
    "SA": "Saudi Arabia",
    "SN": "Senegal",
    "RS": "Serbia",
    "CS": "Serbia and Montenegro",
    "SC": "Seychelles",
    "SL": "Sierra Leone",
    "SG": "Singapore",
    "SX": "Sint Maarten",
    "SK": "Slovakia",
    "SI": "Slovenia",
    "SB": "Solomon Islands",
    "SO": "Somalia",
    "ZA": "South Africa",
    "GS": "South Georgia and the South Sandwich Islands",
    "SS": "South Sudan",
    "ES": "Spain",
    "LK": "Sri Lanka",
    "SD": "Sudan",
    "SR": "Suriname",
    "SJ": "Svalbard and Jan Mayen",
    "SZ": "Swaziland",
    "SE": "Sweden",
    "CH": "Switzerland",
    "SY": "Syrian Arab Republic",
    "TW": "Taiwan, Province of China",
    "TJ": "Tajikistan",
    "TZ": "Tanzania, United Republic of",
    "TH": "Thailand",
    "TL": "Timor-Leste",
    "TG": "Togo",
    "TK": "Tokelau",
    "TO": "Tonga",
    "TT": "Trinidad and Tobago",
    "TN": "Tunisia",
    "TR": "Turkey",
    "TM": "Turkmenistan",
    "TC": "Turks and Caicos Islands",
    "TV": "Tuvalu",
    "UG": "Uganda",
    "UA": "Ukraine",
    "AE": "United Arab Emirates",
    "GB": "United Kingdom",
    "US": "United States",
    "UM": "United States Minor Outlying Islands",
    "UY": "Uruguay",
    "UZ": "Uzbekistan",
    "VU": "Vanuatu",
    "VE": "Venezuela",
    "VN": "Viet Nam",
    "VG": "Virgin Islands, British",
    "VI": "Virgin Islands, U.s.",
    "WF": "Wallis and Futuna",
    "EH": "Western Sahara",
    "YE": "Yemen",
    "ZM": "Zambia",
    "ZW": "Zimbabwe"
  };
  if(!contries[contrie_code]) return "[The Country Code Is Undefined]";
  return contries[contrie_code]
}



function convertNumber(value = 5200){
  if(typeof(value) != "number") return "Mr.convert ERROR: Invalid Type";
  if(isNaN(value)) return "Mr.convert ERROR: Invalid Type";
  if(value < 1000) return value;
  let numbersSuffix = [
		{n:1E3 , s:"K"},
		{n:1E6 , s:"M"},
  	{n:1E9 , s:"B"},
		{v:1E12, s: "T"},
		{v:1E15, s: "P"},
	  {n:1E18, s:"E"}
	]
  let i ;
  for (i = numbersSuffix.length - 1 ; i > 0 ; i--){
    if(value >= numbersSuffix[i].n){
      break
    }
  }
  return ((value / numbersSuffix[i].n).toFixed(2).replace(/\.0+$|(\.[0-9]*[1-9])0+$/,"$1")) + numbersSuffix[i].s
}


const ConvertAPI = {
	"EUR" : [
		{to:"AUD",rates: 1.59},
        {to:"BGN",rates: 1.96},
        {to:"BRL",rates: 6.0292},
        {to:"CAD",rates: 1.464},
        {to:"CHF",rates: 1.093},
        {to:"CNY",rates: 7.6545},
        {to:"CZK",rates: 25.61},
        {to:"DKK",rates: 7.4361},
        {to:"GBP",rates: 0.8545},
        {to:"HKD",rates: 9.1942},
        {to:"HRK",rates: 7.4855},
        {to:"HUF",rates: 353.4},
        {to:"IDR",rates: 17151},
        {to:"ILS",rates: 3.8643},
        {to:"INR",rates: 88.21},
        {to:"ISK",rates: 147.1},
        {to:"JPY",rates: 130.99},
        {to:"KRW",rates: 1341.67},
        {to:"MXN",rates: 23.459},
        {to:"MYR",rates: 4.9193},
        {to:"NOK",rates: 10.215},
        {to:"NZD",rates: 1.6703},
        {to:"PHP",rates: 58.753},
        {to:"PLN",rates: 4.4941},
        {to:"RON",rates: 4.9264},
        {to:"RUB",rates: 86.97},
        {to:"SEK",rates: 10.149},
        {to:"SGD",rates: 1.592},
        {to:"THB",rates: 38.13},
        {to:"TRY",rates: 10.2514},
        {to:"USD",rates: 1.1838},
        {to:"ZAR",rates: 16.8278},
		{to:"MAD",rates: 11},
	],
	"USD" : [
		{to:"AUD",rates: 1.34},
        {to:"BGN",rates: 1.6521},
        {to:"BRL",rates: 5.0931},
        {to:"CAD",rates: 1.2367},
        {to:"CHF",rates: 0.9233},
        {to:"CNY",rates: 6.466},
        {to:"CZK",rates: 21.634},
        {to:"DKK",rates: 6.2816},
        {to:"EUR",rates: 0.84474},
        {to:"GBP",rates: 0.72183},
        {to:"HKD",rates: 7.7667},
        {to:"HRK",rates: 6.3233},
        {to:"HUF",rates: 298.53},
        {to:"IDR",rates: 14488},
        {to:"ILS",rates: 3.2643},
        {to:"INR",rates: 74.514},
        {to:"ISK",rates: 124.26},
        {to:"JPY",rates: 110.65},
        {to:"KRW",rates: 1133.36},
        {to:"MXN",rates: 19.8167},
        {to:"MYR",rates: 4.1555},
        {to:"NOK",rates: 8.629},
        {to:"NZD",rates: 1.411},
        {to:"PHP",rates: 49.631},
        {to:"PLN",rates: 3.7963},
        {to:"RON",rates: 4.1615},
        {to:"RUB",rates: 73.467},
        {to:"SEK",rates: 8.5732},
        {to:"SGD",rates: 1.3448},
        {to:"THB",rates: 32.21},
        {to:"TRY",rates: 8.6597},
        {to:"ZAR",rates: 14.2151},
		{to:"MAD",rates: 10},
	],
	"MAD" : [
		{to:"AUD",rates:0.15},
		{to:"BGN",rates:0.18},
		{to:"BRL",rates:0.58},
		{to:"CAD",rates:0.14},
		{to:"CHF",rates:0.10},
		{to:"CNY",rates:0.72},
		{to:"CZK",rates:2.43},
		{to:"DKK",rates:0.70},
		{to:"EUR",rates:0.095},
		{to:"GBP",rates:0.081},
		{to:"HKD",rates:0.87},
		{to:"HRK",rates:0.71},
		{to:"HUF",rates:33.90},
		{to:"IDR",rates:1.627},
		{to:"ILS",rates:0.36},
		{to:"INR",rates:8.36},
		{to:"ISK",rates:13.82},
		{to:"JPY",rates:12.28},
		{to:"KRW",rates:128.62},
		{to:"MXN",rates:2.24},
		{to:"MYR",rates:0.46},
		{to:"NOK",rates:0.98},
		{to:"NZD",rates:0.16},
		{to:"PHP",rates:5.59},
		{to:"PLN",rates:0.42},
		{to:"RON",rates:0.46},
		{to:"RUB",rates:8.39},
		{to:"SEK",rates:0.96},
		{to:"SGD",rates:0.15},
		{to:"THB",rates:3.63},
		{to:"TRY",rates:0.97},
		{to:"ZAR",rates:1.60},
		{to:"USD",rates:0.11},
	],
	/*"AUD" : [
		{}
	]*/
}
let supported = ["MAD","ZAR","TRY","THB","SGD","SEK","RUB","RON","PLN","PHP","NZD","NOK","MYR","MXN","JPY","ISK","INR","ILS","IDR","HUF","HRK","HKD","GBP","EUR","DKK","CZK","CNY","CHF","CAD","BRL","BGN","AUD","EUR","USD"]
function convertMoney(number , args){
	if(!args.hasOwnProperty("from")) return "No From Here";
    if(!args.hasOwnProperty("to")) return "No To Here";
    let from = args.from;
    let to = args.to;
	if(!ConvertAPI[from]) return "Invalid Money Codes (FROM)";
	if(!supported.includes(to)) return "Invalid Money Codes (TO)";
	if(from == to) return number
	let i;
	for(i = ConvertAPI[from].length - 1 ; i > 0 ; i -= 1){
		if(to == ConvertAPI[from][i].to){
			break;
		}
	}
	return number * ConvertAPI[from][i].rates;
}

let ConvertDistanceAPI = {
	"KM" : [
		{to : "HM" , rates : 10},
		{to : "DAM" ,rates : 100},
		{to : "M" , rates :  1000},
		{to : "DM" , rates : 10000},
		{to : "CM" , rates : 100000},
		{to : "MM" , rates : 1000000},
	],
	"HM" : [
		{to : "KM" , rates : 0.1},
		{to : "DAM" ,rates : 10},
		{to : "M" , rates :  100},
		{to : "DM" , rates : 1000},
		{to : "CM" , rates : 10000},
		{to : "MM" , rates : 100000},
	],
	"DAM" : [
		{to : "KM" , rates : 0.01},
		{to : "HM" ,rates :  0.1},
		{to : "M" , rates :  10},
		{to : "DM" , rates : 100},
		{to : "CM" , rates : 1000},
		{to : "MM" , rates : 10000},
	],
	"M" : [
		{to : "KM" , rates : 0.001},
		{to : "HM" ,rates :  0.01},
		{to : "DAM" , rates :0.1},
		{to : "DM" , rates : 10},
		{to : "CM" , rates : 100},
		{to : "MM" , rates : 1000},
	],
	"DM" : [
		{to : "KM" , rates : 0.0001},
		{to : "HM" ,rates : 0.001},
		{to : "DAM" , rates :  0.01},
		{to : "M" , rates : 0.1},
		{to : "CM" , rates : 10},
		{to : "MM" , rates : 100},
	],
	"CM" : [
		{to : "KM" , rates : 0.00001},
		{to : "HM" ,rates : 0.0001},
		{to : "DAM" , rates :  0.001},
		{to : "M" , rates : 0.01},
		{to : "DM" , rates : 0.1},
		{to : "MM" , rates : 10},
	],
	"MM" : [
		{to : "KM" , rates : 0.000001},
		{to : "HM" ,rates : 0.00001},
		{to : "DAM" , rates :  0.0001},
		{to : "M" , rates : 0.001},
		{to : "DM" , rates : 0.01},
		{to : "MM" , rates : 0.1},
	]
}
let supportedD = ["KM","HM","DAM","M","DM","CM","MM"]
function convertDistance(value , args){
	if(!args.hasOwnProperty("from")) return "No From Here";
    if(!args.hasOwnProperty("to")) return "No To Here";
    let from = args.from;
    let to = args.to;
	if(!ConvertDistanceAPI[from]) return "Invalid Distance Unit (FROM)";
	if(!supportedD.includes(to)) return "Invalid Distance Unit (TO)";
	if(from == to) return value
	let i;
	for(i = ConvertDistanceAPI[from].length - 1 ; i > 0 ; i -= 1){
		if(to == ConvertDistanceAPI[from][i].to){
			break;
		}
	}
	return value * ConvertDistanceAPI[from][i].rates;
}

let timeSupport = ["ms","s","m","h","d"];
let result;
let operation;
function convertTime(time , args) {
	if(!args.hasOwnProperty("from")) return "No From Here";
    if(!args.hasOwnProperty("to")) return "No To Here";
    let from = args.from;
    let to = args.to;
	if(!timeSupport.includes(from) || !timeSupport.includes(to)) return "Unsupported Time Unit \n Support Unit \n ms , s , m , h , d";
	if(from == to) return `${time} ${to}`
	//ms convert
	if(from == "ms" && to == "s"){
		operation = time / 1000;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "ms" && to == "m"){
		operation = time / 60000;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "ms" && to == "h"){
		operation = time / 3600000;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "ms" && to == "d"){
		operation = time / 86400000;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	//second convert
	if(from == "s" && to == "ms"){
		operation = time * 1000;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "s" && to == "m"){
		operation = time / 60;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "s" && to == "h"){
		operation = time / 3600;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "s" && to == "d"){
		operation = time / 86400;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	//minute convert
	if(from == "m" && to == "ms"){
		operation = time * 60000;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "m" && to == "s"){
		operation = time * 60;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "m" && to == "h"){
		operation = time / 60;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "m" && to == "d"){
		operation = time / 1440;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	//hour convert
	if(from == "h" && to == "ms"){
		operation = time * 3600000;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "h" && to == "s"){
		operation = time * 3600;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "h" && to == "m"){
		operation = time * 60;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "h" && to == "d"){
		operation = time / 24;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	//day convert
	if(from == "d" && to == "ms"){
		operation = time * 86400000;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "d" && to == "s"){
		operation = time * 86400;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "d" && to == "m"){
		operation = time * 1440;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
	if(from == "d" && to == "h"){
		operation = time * 24;
		result = `${time} from ${from} to ${to} : ${operation} ${to}`
		return result;
	}
}


module.exports = {
  convertCountriesCode ,
  convertTime , 
  convertMoney ,
  convertDistance ,
  convertNumber
}